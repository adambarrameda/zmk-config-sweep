// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        cmqs: cmqs {
            compatible = "zmk,behavior-mod-morph";
            label = "CMQS";
            bindings = <&kp COMMA>, <&kp LS(SLASH)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        pdex: pdex {
            compatible = "zmk,behavior-mod-morph";
            label = "PDEX";
            bindings = <&kp PERIOD>, <&kp LS(N1)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        del: del {
            compatible = "zmk,behavior-mod-morph";
            label = "DEL";
            bindings = <&lt 2 BACKSPACE>, <&lt 2 DEL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        oplt: oplt {
            compatible = "zmk,behavior-mod-morph";
            label = "OPLT";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        cpgt: cpgt {
            compatible = "zmk,behavior-mod-morph";
            label = "CPGT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
    };

    combos {
        compatible = "zmk,combos";

        oprn {
            bindings = <&oplt>;
            key-positions = <6 7>;
        };

        cprn {
            bindings = <&cpgt>;
            key-positions = <7 8>;
        };

        lbkt {
            bindings = <&kp LBKT>;
            key-positions = <26 27>;
        };

        rbkt {
            bindings = <&kp RBKT>;
            key-positions = <27 28>;
        };

        mins {
            bindings = <&kp MINUS>;
            key-positions = <16 17>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <17 18>;
        };

        astk {
            bindings = <&kp ASTRK>;
            key-positions = <8 9>;
        };

        slsh {
            bindings = <&kp SLASH>;
            key-positions = <18 19>;
        };

        bslh {
            bindings = <&kp BSLH>;
            key-positions = <28 29>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <5 6>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <14 13>;
        };

        pct {
            bindings = <&kp PERCENT>;
            key-positions = <25 26>;
        };

        eql {
            bindings = <&kp EQUAL>;
            key-positions = <12 13>;
        };

        unds {
            bindings = <&kp UNDER>;
            key-positions = <11 12>;
        };

        ampr {
            bindings = <&kp AMPS>;
            key-positions = <2 3>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <1 2>;
        };

        grv {
            bindings = <&kp GRAVE>;
            key-positions = <10 11>;
        };

        tlde {
            bindings = <&kp TILDE>;
            key-positions = <0 1>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <3 4>;
        };

        dllr {
            bindings = <&kp DOLLAR>;
            key-positions = <15 16>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <20 21>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <21 22>;
        };

        pste {
            bindings = <&kp LG(V)>;
            key-positions = <22 23>;
        };

        redo {
            bindings = <&kp LG(LS(Z))>;
            key-positions = <23 24>;
        };

        ret {
            bindings = <&kp RET>;
            key-positions = <32 19>;
        };

        alsoret {
            bindings = <&kp RET>;
            key-positions = <10 31>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <21 22 23>;
        };

        delword {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <11 12 13>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        def {
            bindings = <
&kp Q                   &kp W           &kp E           &kp R         &kp T    &kp Y        &kp U        &kp I       &kp O       &kp P
&ht LSHFT A             &ht LEFT_ALT S  &ht LEFT_GUI D  &ht LCTRL F   &kp G    &kp H        &ht RCTRL J  &ht RGUI K  &ht RALT L  &mt RSHFT SQT
&mt LS(LA(LC(LGUI))) Z  &kp X           &kp C           &kp V         &kp B    &kp N        &kp M        &cmqs       &pdex       &mt LS(LA(LC(LGUI))) SEMI
                                                        &lt 5 ESCAPE  &del     &lt 3 SPACE  &lt 4 TAB
            >;
        };

        game {
            bindings = <
&kp Q  &kp W  &kp E  &kp R   &kp T     &kp Y   &kp U   &kp I      &kp O       &kp P
&kp A  &kp S  &kp D  &kp F   &kp G     &kp H   &kp J   &kp K      &kp L       &kp SEMI
&kp Z  &kp X  &kp C  &kp V   &kp B     &kp N   &kp M   &kp COMMA  &kp PERIOD  &kp SLASH
                     &trans  &trans    &trans  &trans
            >;
        };

        num {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp COMMA  &kp N7  &kp N8  &kp N9  &del
&trans  &trans  &trans  &trans  &trans    &kp N0     &kp N4  &kp N5  &kp N6  &trans
&trans  &trans  &trans  &trans  &trans    &kp DOT    &kp N1  &kp N2  &kp N3  &trans
                        &trans  &trans    &trans     &trans
            >;
        };

        nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &trans
&trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &kp ENTER
&trans  &trans  &trans  &trans  &trans    &trans    &trans     &trans     &trans     &trans
                        &trans  &trans    &trans    &trans
            >;
        };

        sys {
            bindings = <
&tog 1  &trans  &trans  &trans  &bootloader    &kp C_BRI_UP  &kp C_VOL_DN  &kp C_MUTE        &kp C_VOL_UP  &trans
&trans  &trans  &trans  &trans  &trans         &kp C_BRI_DN  &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &trans
&trans  &trans  &trans  &trans  &trans         &trans        &trans        &trans            &trans        &trans
                        &trans  &trans         &trans        &trans
            >;
        };

        fun {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp F1   &kp F2   &kp F3   &kp F4   &kp F5
&trans  &trans  &trans  &trans  &trans    &kp F6   &kp F7   &kp F8   &kp F9   &kp F10
&trans  &trans  &trans  &trans  &trans    &kp F11  &kp F12  &kp F13  &kp F14  &kp F15
                        &trans  &trans    &trans   &trans
            >;
        };
    };
};
